{
  "activity": "Activity",
  "career": "Career",
  "projects": "Projects",
  "about": "About me",
  "books": "Books",
  "contact": "Contact",
  "introductionMessage": "I create scalable applications. Check out my portfolio!",
  "techStack": "Tech Stack",
  "techStackDescription": "Technological stack - languages, frameworks and tools that create solutions.",
  "activityDescription": "GitHub activity - development in numbers.",
  "commercialProjects": "Commercial",
  "commercialProjectsDescription": "real implementations",
  "privateProjects": "Own",
  "privateProjectsDescription": "open-source / hobby / learning",
  "projectsDescription": "Experiments, solutions and developed projects in one place.",
  "january": "January",
  "february": "February",
  "march": "March",
  "april": "April",
  "may": "May",
  "june": "June",
  "july": "July",
  "august": "August",
  "september": "September",
  "october": "October",
  "november": "November",
  "december": "December",
  "januaryShort": "Jan",
  "februaryShort": "Feb",
  "marchShort": "Mar",
  "aprilShort": "Apr",
  "mayShort": "May",
  "juneShort": "Jun",
  "julyShort": "Jul",
  "augustShort": "Aug",
  "septemberShort": "Sep",
  "octoberShort": "Oct",
  "novemberShort": "Nov",
  "decemberShort": "Dec",
  "sensorValue": "Sensor value",
  "digitalMenu": "Digital menu",
  "careerDescription": "Change of industry, evolution of skills, technologies and gained experience.",
  "currently": "Currently",
  "devIntern": "Intern - programmer",
  "careerBreak": "Career break",
  "cncProgrammer": "CNC programmer",
  "aboutDescription": "Who am I, when I don't code?",
  "afterHours": "And after working hours...",
  "aboutMeDescription": "...I also do some coding. For the past two years, I have been working on my own larger project, HungryScan, which focuses on simplifying the configuration of interactive digital menus for restaurants. I also experiment with various CI/CD technologies, set up my own containers on Railway, and try to integrate everything with Jenkins. I also find time for other activities. When I step away from my desk, I go for a run! I run every two days, averaging 7 km per session, and on non-running days, I do strength training using resistance bands and bodyweight exercises.",
  "coding": "Coding",
  "guitar": "Guitar",
  "guitarDescription": "I started at the age of 15 and I still practice, although much less now. I love improvising to different backing tracks and creating my own instrumental pieces.",
  "gamingDescription": "In the evening (or late at night on weekends), I sit down with friends to play games. Most often, they are open-world survival games. When playing solo, I enjoy creative or story-driven games.",
  "booksDescription": "Code is not everything! Read, tested, worth recommending",
  "atlasShrugged": "Atlas Shrugged",
  "cleanCode": "Clean Code: A Handbook of Agile Software Craftsmanship",
  "designPatterns": "Design Patterns: Elements of Reusable Object-Oriented Software",
  "javaBook": "Core Java: Fundamentals, 12th Edition",
  "hackingAPI": "Hacking APIs: Breaking Web Application Programming Interfaces",
  "cantHurt": "Can't Hurt Me",
  "winFriends": "How to Win Friends and Influence People",
  "seeBook": "See book",
  "callMe": "Call me",
  "emailMe": "Email me",
  "location": "Location",
  "nameSurname": "Name and surname",
  "subject": "Subject",
  "message": "Message",
  "send": "Send",
  "contactDescription": "Every project begins with a conversation",
  "technologies": "Technologies",
  "seeProject": "See project",
  "uiDesignerDescription": "Purpose of the project is to showcase UX/UI designer portfolio.",
  "timeTrackerDescription": "Task manager app that allows users to create, manage and track tasks and their operations.",
  "translatorAIDescription": "Widget used to translate text, using DeepL AI model. Has context feature.",
  "airQualityDescription": "Widget showing air quality in chosen places in the world, shows various indicators in given month range.",
  "digitalMenuDescription": "Digital menu used by restaurant visitors, defined in restaurant CMS.",
  "toleranceMeasureDescription": "Program for analysing precision of sawing machines based on given measurements of products made by the machine.",
  "portfolioApiDescription": "REST API server for handling www.maciejakmateusz.pl portfolio, it handles necessary communication for the webpage to work.",
  "hungryScanDescription": "A central REST server supporting a QR system designed for restaurants, which makes it easy for customers to access an interactive menu.",
  "messageSent": "Message sent successfully",
  "invalidFieldLength": "Field should be {{from}} to {{to}} characters long",
  "fieldRequired": "Field is required",
  "restApiDown": "Server is down, please contact me if the issue persists.",
  "badRequest": "Invalid request, please try again or contact me.",
  "internalServerError": "Internal server error, please contact me.",
  "errorOccurred": "An error occurred, please contact me.",
  "invalidDimensionValue": "Dimension should be from {{from}} to {{to}} mm",
  "minDimension": "Dimension should be minimum {{dimension}} mm",
  "productLength": "Product length (mm)",
  "posTolerance": "Positive tolerance (mm)",
  "negTolerance": "Negative tolerance (mm)",
  "measurements": "Product measurements (comma separated)",
  "minMeasurements": "Please enter at least {{number}} measurements",
  "analyse": "Analyse",
  "analysis": "Analysis",
  "generateRandomData": "Generate random data",
  "analysisDate": "Measurement session date: ",
  "allMeasurements": "All measurements (mm): ",
  "amountMeasured": "Amount of measurements: ",
  "pieces": " piece(s)",
  "avgMeasurements": "Average of all measurements: ",
  "outsideTol": "Outside tolerance: ",
  "insideTol": "Inside tolerance: ",
  "greaterThan": "Greater than {{upperBound}} mm: ",
  "smallerThan": "Smaller than {{lowerBound}} mm: ",
  "greatestMeasurement": "Greatest measurement: ",
  "smallestMeasurement": "Smallest measurement: ",
  "measurementsDiff": "The difference between the smallest and the biggest measurement: ",
  "measurementsAsc": "Measurements sorted ascending: ",
  "downloadReport": "Download report",
  "autoDetect": "Auto detect",
  "EN": "English",
  "BG": "Bulgarian",
  "ZH": "Chinese (Traditional)",
  "CS": "Czech",
  "DA": "Danish",
  "ET": "Estonian",
  "FI": "Finnish",
  "FR": "French",
  "EL": "Greek",
  "ES": "Spanish",
  "ID": "Indonesian",
  "JA": "Japanese",
  "KO": "Korean",
  "LT": "Lithuanian",
  "LV": "Latvian",
  "NL": "Dutch",
  "DE": "German",
  "PL": "Polish",
  "PT": "Portuguese",
  "RU": "Russian",
  "RO": "Romanian",
  "SK": "Slovak",
  "SL": "Slovenian",
  "SV": "Swedish",
  "TR": "Turkish",
  "UK": "Ukrainian",
  "HU": "Hungarian",
  "IT": "Italian",
  "commitsAmount": "Commits amount:",
  "more": "More",
  "less": "Less",
  "allRightsReserved": "All rights reserved.",
  "poland": "Poland",
  "context": "Context",
  "contextSub": "(optional) - Specify the subject of the translation",
  "contextPlaceholder": "e.g.: Medicine, Diseases of the nervous system",
  "translation": "Translation",
  "translate": "Translator",
  "translator_projectDescriptionTitle": "Project Description",
  "translator_projectDescriptionText": "This project is an advanced AI-powered translation application that leverages the DeepL model to provide accurate and context-aware translations. The system is designed to seamlessly detect the source language and deliver translated content with improved contextual understanding.",
  "translator_keyFeaturesTitle": "Key Features",
  "translator_languageDetection": "Language Detection",
  "translator_languageDetectionText": "The application automatically identifies the source language to simplify user interaction.",
  "translator_contextualTranslation": "Contextual Translation",
  "translator_contextualTranslationText": "Leveraging DeepL's powerful model, the translator provides translations that maintain context and nuance, ensuring accuracy even for complex sentences.",
  "translator_uiWithReactTS": "User Interface with React and TypeScript",
  "translator_uiWithReactTSText": "The front-end is developed using React and TypeScript, ensuring a responsive, user-friendly, and scalable interface.",
  "translator_stateManagement": "State Management",
  "translator_stateManagementText": "The project incorporates Redux along with Thunk for efficient state management and handling asynchronous API calls.",
  "translator_dynamicInputSelection": "Dynamic Input Selection",
  "translator_dynamicInputSelectionText": "Using React Select, the application offers an intuitive interface for language selection, enhancing the overall user experience.",
  "translator_backendAndAPIIntegrationTitle": "Back-end and API Integration",
  "translator_springBootText": "The back-end leverages Spring Boot 3 to build a robust and scalable REST API, ensuring smooth communication between the front-end and translation engine.",
  "translator_springSecurityText": "Spring Security is integrated to provide secure access control and safeguard sensitive data.",
  "translator_restApiArchitectureText": "The REST API architecture ensures the system is flexible and scalable, supporting future enhancements and additional features.",
  "translator_usageAndBenefitsTitle": "Usage and Benefits",
  "translator_usageAndBenefitsText": "This translator application is ideal for users seeking fast, accurate, and reliable translations. Whether for professional, academic, or personal use, its seamless interface and powerful DeepL integration deliver superior translation results. The combination of modern technologies ensures the application is not only efficient but also secure and scalable.",
  "toleranceMeasure_projectDescription": "Project Description",
  "toleranceMeasure_projectDescriptionText": "ToleranceMeasure is an application designed to analyze the precision of sawing machines by evaluating measurements of manufactured products.",
  "toleranceMeasure_keyFeatures": "Key Features",
  "toleranceMeasure_dataCollection": "Data Collection:",
  "toleranceMeasure_dataCollectionText": "Gather detailed product measurements based on user input.",
  "toleranceMeasure_generatingPDFs": "Generating PDFs:",
  "toleranceMeasure_generatingPDFsText": "Save measurement sessions as pdf files for analysis and printing.",
  "toleranceMeasure_detailedPrecisionAnalysis": "Detailed Precision Analysis:",
  "toleranceMeasure_detailedPrecisionAnalysisText": "Provides insights such as averages, tolerance violations, and measurement distribution.",
  "toleranceMeasure_technologiesUsed": "Technologies Used",
  "toleranceMeasure_dataAnalysis": "Data Analysis",
  "toleranceMeasure_totalProductsMeasured": "Total products measured",
  "toleranceMeasure_averageMeasurement": "Average measurement",
  "toleranceMeasure_toleranceViolations": "Tolerance violations (inside/outside limits)",
  "toleranceMeasure_largestSmallestMeasurements": "Largest and smallest measurements",
  "toleranceMeasure_measurementRange": "Measurement range and sorted results",
  "noResults": "No results",
  "exampleMeasurements": "e.g.: 34.331, 34.524, 34.613",
  "country": "Country",
  "date": "Date",
  "days": "Days",
  "airQuality_projectDescription": "Project Description",
  "airQuality_projectDescriptionText": "A widget that allows users to retrieve air quality data from the OpenAQ platform. The system offers functionalities for filtering data by selected country, location, and time range (year/month). This enables users to monitor air quality in a chosen area over time.",
  "airQuality_features": "Features",
  "airQuality_feature1": "Air Quality Data Retrieval:",
  "airQuality_feature1Text": "Ability to retrieve data from the OpenAQ platform.",
  "airQuality_feature2": "Data Filtering:",
  "airQuality_feature2Text": "Ability to filter data by selected country and location.",
  "airQuality_feature3": "Time Range Selection:",
  "airQuality_feature3Text": "Ability to define a time range (year/month) for the retrieved data.",
  "airQuality_feature4": "Intuitive Interface:",
  "airQuality_feature4Text": "A clear and intuitive user interface that enables easy data management.",
  "airQuality_technologies": "Technologies Used",
  "airQuality_techFrontend": "Frontend:",
  "airQuality_techFrontendText": "TypeScript, React, Redux, Thunk",
  "airQuality_techBackend": "Backend:",
  "airQuality_techBackendText": "Spring Boot, Spring Security, REST API",
  "airQuality_benefits": "Benefits",
  "airQuality_benefitsText": "Users can easily analyze air quality data in various regions and time periods. The system allows quick filtering and retrieval of information, which is crucial for environmental, medical research, or administrative actions. The solution is scalable and can be expanded with additional functionalities such as alerts for high pollution levels or data visualizations on maps.",
  "airQuality_projectDescriptionHeader": "How do air sensors work?",
  "airQuality_projectDescriptionText1": "Sensors measure various air pollution parameters such as:",
  "airQuality_PM25": "PM2.5 – fine particulate matter with a diameter ≤ 2.5 µm",
  "airQuality_PM10": "PM10 – larger particulate matter with a diameter ≤ 10 µm",
  "airQuality_NO2": "NO₂ (Nitrogen Dioxide) – a gas mainly produced by vehicle traffic and fuel combustion",
  "airQuality_SO2": "SO₂ (Sulfur Dioxide) – a gas mainly produced during the combustion of coal and oil",
  "airQuality_CO": "CO (Carbon Monoxide) – a gas resulting from fuel combustion",
  "airQuality_O3": "O₃ (Ozone) – formed through photochemical reactions in the atmosphere",
  "noOptionsMsg": "No results",

  "dataEngineer.workWithBigData": "Working with Big Data",
  "dataEngineer.scalaSpark": "Scala/Spark",
  "dataEngineer.quantexaTeam": "Quantexa Support team",

  "javaDev.scrumHybrid": "Hybrid work in a SCRUM team",
  "javaDev.pmsTeam": "PMS team – payroll and HR solutions",
  "javaDev.retrospectives": "Active participation in retrospectives, planning, and refinements",
  "javaDev.selfTaskPicking": "Independently selecting tasks from the backlog",
  "javaDev.featureImprovements": "Writing functional improvements for a complex payroll algorithm system",
  "javaDev.bugFixing": "Fixing bugs and resolving defects reported by testers and clients",
  "javaDev.automatedTests": "Writing automated tests for defect cases",
  "javaDev.seleniumTests": "Writing Selenium tests",
  "javaDev.jasperReports": "Creating reports in Jaspersoft Studio",
  "javaDev.internalLearning": "Using the internal learning platform to continuously improve skills",

  "javaIntern.onboarding": "Onboarding into the developer role",
  "javaIntern.scrumHybrid": "Hybrid work in a SCRUM team",
  "javaIntern.training": "Training across a wide range of topics",
  "javaIntern.toolLearning": "Learning the tools required for the job",

  "careerBreak.relocation": "Relocation to Poland",
  "careerBreak.thailandTrip": "3-month trip across Thailand",
  "careerBreak.learningTech": "Learning Java, JavaScript, React",

  "cnc.operation": "Operating CNC machines",
  "cnc.programming": "Writing CNC programs (CAM or ISO)",
  "cnc.printOrders": "Printing orders and drawings from the system",
  "cnc.machineSetup": "Reconfiguring machines for specific needs",
  "cnc.technicalDrawings": "Writing programs based on technical drawings",
  "cnc.toolSelection": "Selecting appropriate tools for operations",
  "cnc.optimization": "Reviewing and optimizing the program if needed",
  "cnc.toleranceCheck": "Checking products against drawings to verify tolerances",
  "cnc.orderRegistration": "Registering completed orders in the system"

}